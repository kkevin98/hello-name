STRUCTURE OF THE SRC DIRECTORY
    - settings.gradle (FILE)
        Used to set Gradle's properties

    - gradlew and gradlew.bat (FILE)
        They are wrapping scripts for Windows and Unix respectively.
        They allow to download automatically (without manual installation processes)
          the declarative version of the Gradle script before building the project.
        This allows user to run Gradle tasks in the machine without the needs to have installed
          Gradle locally

    - .gradle (DIR)
        Is a directory where Gradle store data for caching purposes

    - gradle (DIR)
        Directory containing the .jar version of the wrappers

    - .idea (DIR)
        Directory generated by Intellij

    - build (DIR)
        A folder that compare once we compile the first time using IntelliJ (that automatically use Gradle)
        Inside we found the compiled code (.class)

    - src (DIR)
        In the src folder, main and test folows the same structure of Maven Java projects
            main --> contains production code
            test --> contains test code
        IntelliJ uses colors to differentiate different folders/files:
            blue-squared folder --> Java module for IntelliJ
            blue folder --> production src folder
            green folder --> test src folder
            orange folder --> excluded from the IntelliJ project structure
        For more info click+F4 in the folder/file

    Notice that we have some files/directories that we do not want that git keeps tracks.
    Those files are:
        - build (DIR) (Folder created by my build tool system)
        - .idea (FILE) (Just a configuration file)
        - .gradle (FILE) (Just a configuration file)


RUNNING AN APPLICATION
    - Using directly IntelliJ
        Go to the source file you want to run, double click and run (Ctrl+Alt+F10)

    - Using directly Gradle tasks from IntelliJ
        To do so we need to create a .jar file first...
        Click on Gradle-bar in the right of IntelliJ. You'll see a series of tasks:
          those depend on the build.gradle file.
        To create .jar file you can both use 'jar' or 'build' tasks (double-click on them):
            'build' --> perform a full build of the project (aggregate task)
            'jar' --> perform
        After that you'll found .jar files in build/libs.
        Once you've created those .jar files you run the application by running those .jar files from terminal:
            java -jar file_name.jar
        Notice that those .jar are not runnable by default. You need add jar field in build.gradle (3) and
          then re-create the .jar files

    - Using the Gradle wrappers
        Go to source directory and then type: './gradlew taskname'
        To remove all traces of the build activity use the task 'clean' (./gradlew clean) (5)
          This will remove the whole build directory


THE APPLICATION PLUGIN
    - Allows to create easily the final application executable and its zipped version.

    - Running the application
        Go to source directory and then type: './gradlew run'

    - Zip the final application
        Go to source directory and then type: './gradlew distZip'
        Or use it directly from Gradle's dashboard inside IntelliJ
        The results can be found in build/distribution.
        Once unzipped inside the bin directory you can find the executable both for Windows (.bat) and
          for Unix systems. The application can be run using './bin/filename' and you can pass also
          arguments from command line.


SOURCES:
  1 How the project directory is structured ->
    https://www.jetbrains.com/idea/guide/tutorials/working-with-gradle/tour-of-a-gradle-project/
  2 What are Gradle plugins, Java plugin in particular ->
    https://docs.gradle.org/current/userguide/java_plugin.html#header
  3 Create runnable .jar files from tasks ->
    https://docs.gradle.org/current/userguide/building_java_projects.html#sec:jar_manifest
  4 Application Gradle plugin
    https://docs.gradle.org/current/userguide/application_plugin.html#sec:application_tasks
  5 Base plugin tasks
    https://docs.gradle.org/current/userguide/base_plugin.html#sec:base_tasks


